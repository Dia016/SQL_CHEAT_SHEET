 

Use the ALTER TABLE statement in the correct syntax.
Use TRUNCATE statements in syntax.
Execute examples of ALTER and TRUNCATE statements.
ALTER TABLE
ALTER TABLE statements can be used to add or remove columns from a table, to modify the data type of columns, to add or remove keys, and to add or remove constraints. The syntax of the ALTER TABLE statement is:

ADD COLUMN syntax
1
2
ALTER TABLE table_name
ADD column_name data_type;
Copied!
A variation of the syntax for adding column is:

1
2
ALTER TABLE table_name
ADD COLUMN column_name data_type;
Copied!
By default, all the entries are initially assigned the value NULL. You can then use UPDATE statements to add the necessary column values.

For example, to add a telephone_number column to the author table in the library database, the statement will be written as:

1
2
ALTER TABLE author 
ADD telephone_number BIGINT;
Copied!
Here, BIGINT is a data type for Big Integer.
After adding the entries to the new column, a sample output is shown below.


Modify column data type
1
2
ALTER TABLE table_name
MODIFY column_name data_type;
Copied!
Sometimes, the data presented may be in a different format than required. In such a case, we need to modify the data_type of the column. 
  For example, using a numeric data type for telephone_number means you cannot include parentheses, plus signs, or dashes as part of the number.
  For such entries, the appropriate choice of data_type is CHAR.

To modify the data type, the statement will be written as:

1
2
ALTER TABLE author
MODIFY telephone_number CHAR(20);
Copied!
The entries can then be updated using UPDATE statements. An updated version of the "author" table is shown below.


TRUNCATE Table
TRUNCATE TABLE statements are used to delete all of the rows in a table. The syntax of the statement is:

1
TRUNCATE TABLE table_name;
Copied!
So, to truncate the "author" table, the statement will be written as:

1
TRUNCATE TABLE author;

CREATE TABLE statement
In the previous video, we saw the general syntax to create a table:

1
2
3
4
5
6
CREATE TABLE TableName (
   COLUMN1 datatype,
   COLUMN2 datatype,
   COLUMN3 datatype, 
   ...
);
Copied!
Consider the following examples:

Create a TEST table with two columns - ID of type integer and NAME of type varchar. For this, we use the following SQL statement.
1
2
3
4
CREATE TABLE TEST (
   ID int,
   NAME varchar(30)
);
Copied!
Create a COUNTRY table with an integer ID column, a two-letter country code column, and a variable length country name column. For this, we may use the following SQL statement.
1
2
3
4
5
CREATE TABLE COUNTRY (
   ID int,
   CCODE char(2),
   Name varchar(60)
);
Copied!
In the example above, make ID a primary key. Then, the statement will be modified as shown below.
1
2
3
4
5
6
CREATE TABLE COUNTRY (
   ID int NOT NULL,
   CCODE char(2),
   Name varchar(60)
   PRIMARY KEY (ID)
);
Copied!
In the above example, the ID column has the NOT NULL constraint added after the datatype, meaning that it cannot contain a NULL or an empty value. This is added since the database does not allow Primary Keys to have NULL values.

DROP TABLE
If the table you are trying to create already exists in the database, you will get an error indicating table XXX.YYY already exists. To circumvent this error, create a table with a different name or first DROP the existing table. It is common to issue a DROP before doing a CREATE in test and development scenarios.

The syntax to drop a table is:

1
DROP TABLE TableName;
Copied!
For example, consider that you wish to drop the contents of the table COUNTRY if a table exists in the dataset with the same name. In such a case, the code for the last example becomes

DROP TABLE COUNTRY;
CREATE TABLE COUNTRY (
   ID int NOT NULL,
   CCODE char(2),
   Name varchar(60)
   PRIMARY KEY (ID)
);
